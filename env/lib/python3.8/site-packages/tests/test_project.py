import subprocess
import pytest
import os
import yaml
from tests.utils import recursive_imports_check


@pytest.mark.parametrize("project_name,namespace,docker_registry", [("test-project", "test-ns", "localhost:5000")])
def test_init_with_user_input(project_name, namespace, docker_registry, tmpdir):
    os.chdir(tmpdir)
    stdinput = "%s\n%s\n3\n%s\n" % (project_name, namespace, docker_registry)
    expected_output = "Project %s created successfully\nNow you have to configure subject storage support\n" \
                      "Look at \"Config subject storage support\" section in README\n" % project_name
    output = subprocess.check_output(['krules-py', 'project', 'init', "."], input=stdinput.encode())
    assert output.decode("utf-8").endswith(expected_output)
    recursive_imports_check("project_tmpl", os.getcwd())
    config_path = os.path.join(".project", "config.yaml")
    assert os.path.exists(config_path)
    with open(config_path) as f:
        config = yaml.load(f, Loader=yaml.SafeLoader)
    assert config["project"]["name"] == project_name
    assert config["profiles"]["default"]["docker_registry"] == docker_registry
    assert config["profiles"]["default"]["namespace"] == namespace


@pytest.mark.parametrize("project_name,namespace,docker_registry", [("test-project", "test-ns", "localhost:5000")])
def test_init_with_params(project_name, namespace, docker_registry, tmpdir):
    os.chdir(tmpdir)
    expected_output = "Project %s created successfully\nNow you have to configure subject storage support\n" \
                      "Look at \"Config subject storage support\" section in README\n" % project_name
    output = subprocess.check_output(['krules-py', 'project', 'init', ".",
                                      "--name", project_name,
                                      "--namespace", namespace,
                                      "--docker-registry", docker_registry
                                      ])
    assert output.decode("utf-8").endswith(expected_output)
    recursive_imports_check("project_tmpl", os.getcwd())
    config_path = os.path.join(".project", "config.yaml")
    assert os.path.exists(config_path)
    with open(config_path) as f:
        config = yaml.load(f, Loader=yaml.SafeLoader)
    assert config["project"]["name"] == project_name
    assert config["profiles"]["default"]["docker_registry"] == docker_registry
    assert config["profiles"]["default"]["namespace"] == namespace


@pytest.mark.parametrize("project_name", ["test_project"])
def test_init_already_exists(project_name, tmpdir):
    os.chdir(tmpdir)
    os.mkdir(".project")
    expected_output = "Project already exists in %s\n" % os.getcwd()
    output = subprocess.check_output(['krules-py', 'project', 'init', ".", '-n', project_name],
                                     stderr=subprocess.STDOUT)
    print("output", output)
    assert output.decode("utf-8") == expected_output
