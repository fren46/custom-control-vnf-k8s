import subprocess
import pytest
import os
import yaml
from tests.utils import recursive_imports_check


def get_current_profile(tmpdir):
    _init_fake_project(tmpdir)
    assert subprocess.check_output(["krules-py", "profile", "get"]).decode("utf-8") == "default"


@pytest.mark.parametrize("profile_name,set_default", [("testProfile", False), ("testProfile", True)])
def add_current_profile(profile_name, set_default, tmpdir):
    _init_fake_project(tmpdir)
    if set_default:
        output = subprocess.check_output(["krules-py", "profile", "add", profile_name, "--set-default"]).decode("utf-8")
        assert output == "Profile %s added properly" % profile_name + "\n" + \
            "Profile %s is now the current one" % profile_name
        assert subprocess.check_output(["krules-py", "profile", "get"]).decode("utf-8") == profile_name
    else:
        output = subprocess.check_output(["krules-py", "profile", "add", profile_name]).decode("utf-8")
        assert output == "Profile %s added properly" % profile_name


@pytest.mark.parametrize("profile_name", ["testProfile"])
def set_current_profile(profile_name, tmpdir):
    _init_fake_project(tmpdir)
    subprocess.check_output(["krules-py", "profile", "add", profile_name]).decode("utf-8")
    assert subprocess.check_output(["krules-py", "profile", "get"]).decode("utf-8") != profile_name
    assert subprocess.check_output(["krules-py", "profile", "set", profile_name]
                                   ).decode("utf-8") == "%s now is the current profile" % profile_name
    assert subprocess.check_output(["krules-py", "profile", "get"]).decode("utf-8") == profile_name


def set_current_profile_without_add_it(tmpdir):
    _init_fake_project(tmpdir)
    not_existing_profile = "not_existing_profile"
    output = subprocess.check_output(["krules-py", "profile", "set", not_existing_profile]
                                   ).decode("utf-8")
    assert output.startswith("\"%s\" is not a valid profile name" % not_existing_profile)


def _init_fake_project(tmpdir):
    os.chdir(tmpdir)
    subprocess.check_output(['krules-py', 'project', 'init', ".",
                             "--name", "test-project",
                             "--namespace", "test-ns",
                             "--docker-registry", "localhost:5000"
                             ])
